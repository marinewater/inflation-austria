{"version":3,"sources":["../js/html.js","../js/i18n.js","../js/date.js","../js/removeChildren.js","../js/inflation.js","../js/request.js","../js/conversion.js","../js/constants.js","../js/month_order.js","../js/listeners.js","../js/index.js"],"names":["euro_from_getter","euro","parseFloat","document","getElementById","value","isNaN","translate_month","month","translations","language","add_years_to_select","select","_i","sortedYears_1","Object","keys","inflation_data","map","y","parseInt","sort","a","b","length","year","option_element","createElement","text","toString","appendChild","year_change_listener","e","on_year_change","target","select_last","selected_year","month_select","parentElement","querySelector","selected_month_name","element","firstChild","removeChild","remove_children","sortedMonth_1","monthOrder","new_month_index","month_name","months_options","querySelectorAll","i","_get_month_index","selected","update_inflation","month_change_listener","get_data","url","callback","xhr","XMLHttpRequest","open","onload","status","responseText","send","request","err","result","JSON","parse","year_from_select","year_to_select","lastChild","add_years","inflation","from_year","from_month","to_year","to_month","from_inflation","calculate_inflation","textContent","toFixed","euro_result_setter","round","inflation_result_setter","euro_past_listener","schilling","schilling_from_setter","schilling_exchange_rate","schilling_past_listener","euro_from_setter","schilling_from_getter","input","Math","de","Jänner","Februar","März","April","Mai","Juni","Juli","August","September","Oktober","November","Dezember","Ø","en","getAttribute","addEventListener"],"mappings":"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","sourcesContent":["/**\n * gets euro value from input and converts it to a number\n * @returns {number}\n */\nexport function euro_from_getter() {\n    var euro = parseFloat(document.getElementById('euro_past').value);\n    if (isNaN(euro)) {\n        euro = 0;\n    }\n    return euro;\n}\n/**\n * get schilling value from input and converts it to a number\n * @returns {number}\n */\nexport function schilling_from_getter() {\n    var schilling = parseFloat(document.getElementById('schilling_past').value);\n    if (isNaN(schilling)) {\n        schilling = 0;\n    }\n    return schilling;\n}\n/**\n * writes value to euro_past input\n * @param {number} euro\n */\nexport function euro_from_setter(euro) {\n    document.getElementById('euro_past').value = euro.toFixed(2);\n}\n/**\n * writes value to schilling_past input\n * @param {number} schilling\n */\nexport function schilling_from_setter(schilling) {\n    document.getElementById('schilling_past').value = schilling.toFixed(2);\n}\n/**\n * gets year from year_from select\n * @returns {number}\n */\nexport function year_from_getter() {\n    return parseInt(document.getElementById('year_from').value, 10);\n}\n/**\n * gets month from month_from select\n * @returns {string}\n */\nexport function month_from_getter() {\n    return document.getElementById('month_from').value;\n}\n/**\n * gets year from year_to select\n * @returns {number}\n */\nexport function year_to_getter() {\n    return parseInt(document.getElementById('year_to').value, 10);\n}\n/**\n * gets month from month_to select\n * @returns {string}\n */\nexport function month_to_getter() {\n    return document.getElementById('month_to').value;\n}\n/**\n * writes resulting euro to euro result element\n * @param {number} euro\n */\nexport function euro_result_setter(euro) {\n    var euro_result_element = document.getElementById('euro_present');\n    euro_result_element.textContent = euro.toFixed(2) + \"\\u20AC\";\n}\n/**\n * writes inflation to inflation result element\n * @param {number} inflation\n */\nexport function inflation_result_setter(inflation) {\n    var inflation_result_element = document.getElementById('inflation_present');\n    inflation_result_element.textContent = \"(\" + inflation.toFixed(2) + \"% Inflation)\";\n}\n/**\n * gets the language from the html documents lang attribute\n * @returns {string}\n */\nexport function language_getter() {\n    return document.querySelector('html').getAttribute('lang');\n}\n","import { language_getter } from './html';\nvar translations = {\n    de: {\n        month: {\n            'Jänner': 'Jänner',\n            'Februar': 'Februar',\n            'März': 'März',\n            'April': 'April',\n            'Mai': 'Mai',\n            'Juni': 'Juni',\n            'Juli': 'Juli',\n            'August': 'August',\n            'September': 'September',\n            'Oktober': 'Oktober',\n            'November': 'November',\n            'Dezember': 'Dezember',\n            'Ø': 'Ø'\n        }\n    },\n    en: {\n        month: {\n            'Jänner': 'January',\n            'Februar': 'February',\n            'März': 'March',\n            'April': 'April',\n            'Mai': 'May',\n            'Juni': 'June',\n            'Juli': 'July',\n            'August': 'August',\n            'September': 'September',\n            'Oktober': 'October',\n            'November': 'November',\n            'Dezember': 'December',\n            'Ø': 'Ø'\n        }\n    }\n};\nvar language = language_getter();\n/**\n * returns a translation for the month name in the current language\n * @param {string} month\n * @returns {string}\n */\nexport function translate_month(month) {\n    return translations[language].month[month];\n}\n","import { inflation_data, update_inflation } from './inflation';\nimport { remove_children } from './removeChildren';\nimport { translate_month } from './i18n';\nimport { monthOrder } from './month_order';\n/**\n * adds selectable year options to all year select elements\n */\nexport function add_years() {\n    var year_from_select = document.getElementById('year_from');\n    var year_to_select = document.getElementById('year_to');\n    add_years_to_select(year_from_select);\n    add_years_to_select(year_to_select);\n    year_from_select.firstChild.selected = true;\n    year_to_select.lastChild.selected = true;\n    on_year_change(year_from_select);\n    on_year_change(year_to_select, true);\n    update_inflation();\n}\n/**\n * adds selectable years to a specific select element\n * @param {HTMLSelectElement} select element where the options should be appended\n */\nfunction add_years_to_select(select) {\n    var sortedYears = Object.keys(inflation_data).map(function (y) { return parseInt(y, 10); }).sort(function (a, b) { return a - b; });\n    for (var _i = 0, sortedYears_1 = sortedYears; _i < sortedYears_1.length; _i++) {\n        var year = sortedYears_1[_i];\n        var option_element = document.createElement('option');\n        option_element.text = year.toString(10);\n        select.appendChild(option_element);\n    }\n}\n/**\n * event listener for year change events\n * @param {Event} e\n */\nexport function year_change_listener(e) {\n    var target = e.target;\n    on_year_change(target);\n}\n/**\n * adds month to month select if year is changed and recalculates inflation\n * @param {HTMLSelectElement} target year select element\n * @param {boolean} [select_last=false]\n */\nfunction on_year_change(target, select_last) {\n    if (select_last === void 0) { select_last = false; }\n    var selected_year = parseInt(target.value, 10);\n    var month_select = target.parentElement.querySelector('select.month');\n    var selected_month_name = month_select.value;\n    remove_children(month_select);\n    var sortedMonth = Object.keys(inflation_data[selected_year])\n        .sort(function (a, b) { return monthOrder[a] - monthOrder[b]; });\n    for (var _i = 0, sortedMonth_1 = sortedMonth; _i < sortedMonth_1.length; _i++) {\n        var month = sortedMonth_1[_i];\n        var option_element = document.createElement('option');\n        option_element.text = translate_month(month);\n        option_element.value = month;\n        month_select.appendChild(option_element);\n    }\n    var new_month_index = _get_month_index(selected_month_name, month_select, select_last);\n    var months = month_select.querySelectorAll('option');\n    months[new_month_index].selected = true;\n    update_inflation();\n}\n/**\n * returns index of the given month name in a list of option elements\n * returns 0 if month cannot be found\n * @param {string | null} month_name\n * @param {HTMLSelectElement} month_select\n * @param {boolean} select_last\n * @returns {number}\n * @private\n */\nfunction _get_month_index(month_name, month_select, select_last) {\n    var months_options = month_select.querySelectorAll('option');\n    if (select_last === true) {\n        return months_options.length - 1;\n    }\n    if (month_name === null) {\n        return 0;\n    }\n    for (var i = 0; i < months_options.length; i++) {\n        if (months_options[i].value === month_name) {\n            return i;\n        }\n    }\n    return 0;\n}\n/**\n * event listener for month change events\n */\nexport function month_change_listener() {\n    update_inflation();\n}\n","/**\n * removes all child nodes from an html element\n * @param {HTMLElement} element\n */\nexport function remove_children(element) {\n    while (element.firstChild) {\n        element.removeChild(element.firstChild);\n    }\n}\n","import { round } from './conversion';\nimport { add_years } from './date';\nimport { year_from_getter, month_from_getter, year_to_getter, month_to_getter, euro_from_getter, euro_result_setter, inflation_result_setter } from './html';\nimport { request } from './request';\nexport var inflation_data = {};\n/**\n * Downloads and stores inflation data.\n */\nexport function get_data() {\n    request('./data/inflation_data.json', function (err, result) {\n        if (err) {\n            throw err;\n        }\n        inflation_data = JSON.parse(result);\n        add_years();\n    });\n}\n/**\n * Calculates inflation between two dates.\n * @param {number} from_year calculate inflation starting from this year\n * @param {string} from_month calculate inflation starting from this month\n * @param {number} to_year calculate inflation level in this year\n * @param {string} to_month calculate inflation level in this month\n * @returns {number} inflation\n */\nfunction calculate_inflation(from_year, from_month, to_year, to_month) {\n    var from_inflation = inflation_data[from_year][from_month];\n    var to_inflation = inflation_data[to_year][to_month];\n    return to_inflation / from_inflation;\n}\n/**\n * Reads inflation data from input fields and displays resulting inflation\n */\nexport function update_inflation() {\n    var year_from = year_from_getter();\n    var month_from = month_from_getter();\n    var year_to = year_to_getter();\n    var month_to = month_to_getter();\n    var inflation = calculate_inflation(year_from, month_from, year_to, month_to);\n    var from_euro = euro_from_getter();\n    var to_euro = round(from_euro * inflation);\n    euro_result_setter(to_euro);\n    inflation_result_setter(round((inflation - 1) * 100));\n}\n","/**\n * Do an XHR via GET\n * @param {string} url url the request is sent to\n * @param {(err: (string | null), result?: string) => void} callback function called after request is done\n */\nexport function request(url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.onload = function () {\n        if (xhr.status === 200) {\n            callback(null, xhr.responseText);\n        }\n        else {\n            callback(\"Request failed.  Returned status of \" + xhr.status);\n        }\n    };\n    xhr.send();\n}\n","import { schilling_exchange_rate } from './constants';\nimport { euro_from_getter, euro_from_setter, schilling_from_getter, schilling_from_setter } from './html';\nimport { update_inflation } from './inflation';\n/**\n * event listener for euro change events\n * updates Schilling with conversion rate\n * @param {Event} e\n */\nexport function euro_past_listener(e) {\n    var euro = euro_from_getter();\n    schilling_from_setter(round(euro * schilling_exchange_rate));\n    update_inflation();\n}\n/**\n * event listener for Schilling change events\n * updates euro with conversion rate\n * @param {Event} e\n */\nexport function schilling_past_listener(e) {\n    var schilling = schilling_from_getter();\n    euro_from_setter(round(schilling / schilling_exchange_rate));\n    update_inflation();\n}\n/**\n * rounds to two decimal places\n * @param {number} input number to be rounded\n * @returns {number} rounded number\n */\nexport function round(input) {\n    return Math.round(input * 100) / 100;\n}\n","/**\n * euro/schilling conversion rate\n * @type {number}\n */\nexport var schilling_exchange_rate = 13.7603;\n","export var monthOrder = {\n    'Jänner': 0,\n    'Februar': 1,\n    'März': 2,\n    'April': 3,\n    'Mai': 4,\n    'Juni': 5,\n    'Juli': 6,\n    'August': 7,\n    'September': 8,\n    'Oktober': 9,\n    'November': 10,\n    'Dezember': 11,\n    'Ø': 12\n};\n","import { euro_past_listener, schilling_past_listener } from './conversion';\nimport { year_change_listener, month_change_listener } from './date';\n/**\n * Binds event listeners to html elements on page load\n */\nexport function addListeners() {\n    document.getElementById('euro_past').addEventListener('change', euro_past_listener);\n    document.getElementById('euro_past').addEventListener('keyup', euro_past_listener);\n    document.getElementById('schilling_past').addEventListener('change', schilling_past_listener);\n    document.getElementById('schilling_past').addEventListener('keyup', schilling_past_listener);\n    document.getElementById('year_from').addEventListener('change', year_change_listener);\n    document.getElementById('month_from').addEventListener('change', month_change_listener);\n    document.getElementById('year_to').addEventListener('change', year_change_listener);\n    document.getElementById('month_to').addEventListener('change', month_change_listener);\n}\n","import { addListeners } from \"./listeners\";\nimport { get_data } from './inflation';\nfunction main() {\n    addListeners();\n    get_data();\n}\nmain();\n"]}