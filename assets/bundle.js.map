{"version":3,"sources":["../js/html.js","../js/date.js","../js/removeChildren.js","../js/inflation.js","../js/request.js","../js/conversion.js","../js/constants.js","../js/listeners.js","../js/index.js"],"names":["euro_from_getter","euro","parseFloat","document","getElementById","value","isNaN","add_years_to_select","select","year","inflation_data","option_element","createElement","text","appendChild","year_change_listener","e","on_year_change","target","selected_year","parseInt","month_select","parentElement","querySelector","element","firstChild","removeChild","remove_children","month","update_inflation","month_change_listener","get_data","url","callback","xhr","XMLHttpRequest","open","onload","status","responseText","send","request","err","result","JSON","parse","year_from_select","year_to_select","selected","lastChild","add_years","inflation","from_year","from_month","to_year","to_month","from_inflation","calculate_inflation","textContent","toFixed","euro_result_setter","round","inflation_result_setter","euro_past_listener","schilling","schilling_from_setter","schilling_exchange_rate","schilling_past_listener","euro_from_setter","schilling_from_getter","input","Math","addEventListener"],"mappings":"yBAIA,SAAgBA,IACZ,IAAIC,EAAOC,WAAWC,SAASC,eAAe,aAAaC,OAI3D,OAHIC,MAAML,KACNA,EAAO,GAEJA,ECWX,SAASM,EAAoBC,GACzB,IAAK,IAAIC,KAAQC,EAAgB,CAC7B,IAAIC,EAAiBR,SAASS,cAAc,UAC5CD,EAAeE,KAAOJ,EACtBD,EAAOM,YAAYH,IAO3B,SAAgBI,EAAqBC,GAEjCC,EADaD,EAAEE,QAOnB,SAASD,EAAeC,GACpB,IAAIC,EAAgBC,SAASF,EAAOb,MAAO,IACvCgB,EAAeH,EAAOI,cAAcC,cAAc,iBCrC1D,SAAgCC,GAC5B,KAAOA,EAAQC,YACXD,EAAQE,YAAYF,EAAQC,YDoChCE,CAAgBN,GAChB,IAAK,IAAIO,KAASlB,EAAeS,GAAgB,CAC7C,IAAIR,EAAiBR,SAASS,cAAc,UAC5CD,EAAeE,KAAOe,EACtBP,EAAaP,YAAYH,GAE7BkB,IAKJ,SAAgBC,IACZD,IE9CJ,SAAgBE,KCHhB,SAAwBC,EAAKC,GACzB,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOJ,GAChBE,EAAIG,OAAS,WACU,MAAfH,EAAII,OACJL,EAAS,KAAMC,EAAIK,cAGnBN,EAAS,uCAAyCC,EAAII,SAG9DJ,EAAIM,ODPJC,CAAQ,6BAA8B,SAAUC,EAAKC,GACjD,GAAID,EACA,MAAMA,EAEVhC,EAAiBkC,KAAKC,MAAMF,GFRpC,WACI,IAAIG,EAAmB3C,SAASC,eAAe,aAC3C2C,EAAiB5C,SAASC,eAAe,WAC7CG,EAAoBuC,GACpBvC,EAAoBwC,GACpBD,EAAiBrB,WAAWuB,UAAW,EACvCD,EAAeE,UAAUD,UAAW,EACpC/B,EAAe6B,GACf7B,EAAe8B,GACflB,IEAIqB,KAmBR,SAAgBrB,IACZ,IAIIsB,EAbR,SAA6BC,EAAWC,EAAYC,EAASC,GACzD,IAAIC,EAAiB9C,EAAe0C,GAAWC,GAE/C,OADmB3C,EAAe4C,GAASC,GACrBC,EAUNC,CHGTrC,SAASjB,SAASC,eAAe,aAAaC,MAAO,IAOrDF,SAASC,eAAe,cAAcC,MAOtCe,SAASjB,SAASC,eAAe,WAAWC,MAAO,IAOnDF,SAASC,eAAe,YAAYC,QAM/C,SAAmCJ,GACLE,SAASC,eAAe,gBAC9BsD,YAAczD,EAAK0D,QAAQ,GAAK,IG7BpDC,CADcC,EADE7D,IACgBmD,IHoCpC,SAAwCA,GACLhD,SAASC,eAAe,qBAC9BsD,YAAc,IAAMP,EAAUQ,QAAQ,GAAK,eGpCpEG,CAAwBD,EAAwB,KAAjBV,EAAY,KElC/C,SAAgBY,EAAmB/C,ILyBnC,SAAsCgD,GAClC7D,SAASC,eAAe,kBAAkBC,MAAQ2D,EAAUL,QAAQ,GKxBpEM,CAAsBJ,EADX7D,IACwBkE,IACnCrC,IAOJ,SAAgBsC,EAAwBnD,ILQxC,SAAiCf,GAC7BE,SAASC,eAAe,aAAaC,MAAQJ,EAAK0D,QAAQ,GKP1DS,CAAiBP,ELLrB,WACI,IAAIG,EAAY9D,WAAWC,SAASC,eAAe,kBAAkBC,OAIrE,OAHIC,MAAM0D,KACNA,EAAY,GAETA,EKDSK,GACmBH,IACnCrC,IAOJ,SAAgBgC,EAAMS,GAClB,OAAOC,KAAKV,MAAc,IAARS,GAAe,ICzBrC,IAAWJ,EAA0B,QHA1BxD,KIEPP,SAASC,eAAe,aAAaoE,iBAAiB,SAAUT,GAChE5D,SAASC,eAAe,aAAaoE,iBAAiB,QAAST,GAC/D5D,SAASC,eAAe,kBAAkBoE,iBAAiB,SAAUL,GACrEhE,SAASC,eAAe,kBAAkBoE,iBAAiB,QAASL,GACpEhE,SAASC,eAAe,aAAaoE,iBAAiB,SAAUzD,GAChEZ,SAASC,eAAe,cAAcoE,iBAAiB,SAAU1C,GACjE3B,SAASC,eAAe,WAAWoE,iBAAiB,SAAUzD,GAC9DZ,SAASC,eAAe,YAAYoE,iBAAiB,SAAU1C,GCT/DC","sourcesContent":["/**\n * gets euro value from input and converts it to a number\n * @returns {number}\n */\nexport function euro_from_getter() {\n    var euro = parseFloat(document.getElementById('euro_past').value);\n    if (isNaN(euro)) {\n        euro = 0;\n    }\n    return euro;\n}\n/**\n * get schilling value from input and converts it to a number\n * @returns {number}\n */\nexport function schilling_from_getter() {\n    var schilling = parseFloat(document.getElementById('schilling_past').value);\n    if (isNaN(schilling)) {\n        schilling = 0;\n    }\n    return schilling;\n}\n/**\n * writes value to euro_past input\n * @param {number} euro\n */\nexport function euro_from_setter(euro) {\n    document.getElementById('euro_past').value = euro.toFixed(2);\n}\n/**\n * writes value to schilling_past input\n * @param {number} schilling\n */\nexport function schilling_from_setter(schilling) {\n    document.getElementById('schilling_past').value = schilling.toFixed(2);\n}\n/**\n * gets year from year_from select\n * @returns {number}\n */\nexport function year_from_getter() {\n    return parseInt(document.getElementById('year_from').value, 10);\n}\n/**\n * gets month from month_from select\n * @returns {string}\n */\nexport function month_from_getter() {\n    return document.getElementById('month_from').value;\n}\n/**\n * gets year from year_to select\n * @returns {number}\n */\nexport function year_to_getter() {\n    return parseInt(document.getElementById('year_to').value, 10);\n}\n/**\n * gets month from month_to select\n * @returns {string}\n */\nexport function month_to_getter() {\n    return document.getElementById('month_to').value;\n}\n/**\n * writes resulting euro to euro result element\n * @param {number} euro\n */\nexport function euro_result_setter(euro) {\n    var euro_result_element = document.getElementById('euro_present');\n    euro_result_element.textContent = euro.toFixed(2) + \"\\u20AC\";\n}\n/**\n * writes inflation to inflation result element\n * @param {number} inflation\n */\nexport function inflation_result_setter(inflation) {\n    var inflation_result_element = document.getElementById('inflation_present');\n    inflation_result_element.textContent = \"(\" + inflation.toFixed(2) + \"% Inflation)\";\n}\n","import { inflation_data, update_inflation } from './inflation';\nimport { remove_children } from './removeChildren';\n/**\n * adds selectable year options to all year select elements\n */\nexport function add_years() {\n    var year_from_select = document.getElementById('year_from');\n    var year_to_select = document.getElementById('year_to');\n    add_years_to_select(year_from_select);\n    add_years_to_select(year_to_select);\n    year_from_select.firstChild.selected = true;\n    year_to_select.lastChild.selected = true;\n    on_year_change(year_from_select);\n    on_year_change(year_to_select);\n    update_inflation();\n}\n/**\n * adds selectable years to a specific select element\n * @param {HTMLSelectElement} select element where the options should be appended\n */\nfunction add_years_to_select(select) {\n    for (var year in inflation_data) {\n        var option_element = document.createElement('option');\n        option_element.text = year;\n        select.appendChild(option_element);\n    }\n}\n/**\n * event listener for year change events\n * @param {Event} e\n */\nexport function year_change_listener(e) {\n    var target = e.target;\n    on_year_change(target);\n}\n/**\n * adds month to month select if year is changed and recalculates inflation\n * @param {HTMLSelectElement} target year select element\n */\nfunction on_year_change(target) {\n    var selected_year = parseInt(target.value, 10);\n    var month_select = target.parentElement.querySelector('select.month');\n    remove_children(month_select);\n    for (var month in inflation_data[selected_year]) {\n        var option_element = document.createElement('option');\n        option_element.text = month;\n        month_select.appendChild(option_element);\n    }\n    update_inflation();\n}\n/**\n * event listener for month change events\n */\nexport function month_change_listener() {\n    update_inflation();\n}\n","/**\n * removes all child nodes from an html element\n * @param {HTMLElement} element\n */\nexport function remove_children(element) {\n    while (element.firstChild) {\n        element.removeChild(element.firstChild);\n    }\n}\n","import { round } from './conversion';\nimport { add_years } from './date';\nimport { year_from_getter, month_from_getter, year_to_getter, month_to_getter, euro_from_getter, euro_result_setter, inflation_result_setter } from './html';\nimport { request } from './request';\nexport var inflation_data = {};\n/**\n * Downloads and stores inflation data.\n */\nexport function get_data() {\n    request('./data/inflation_data.json', function (err, result) {\n        if (err) {\n            throw err;\n        }\n        inflation_data = JSON.parse(result);\n        add_years();\n    });\n}\n/**\n * Calculates inflation between two dates.\n * @param {number} from_year calculate inflation starting from this year\n * @param {string} from_month calculate inflation starting from this month\n * @param {number} to_year calculate inflation level in this year\n * @param {string} to_month calculate inflation level in this month\n * @returns {number} inflation\n */\nfunction calculate_inflation(from_year, from_month, to_year, to_month) {\n    var from_inflation = inflation_data[from_year][from_month];\n    var to_inflation = inflation_data[to_year][to_month];\n    return to_inflation / from_inflation;\n}\n/**\n * Reads inflation data from input fields and displays resulting inflation\n */\nexport function update_inflation() {\n    var year_from = year_from_getter();\n    var month_from = month_from_getter();\n    var year_to = year_to_getter();\n    var month_to = month_to_getter();\n    var inflation = calculate_inflation(year_from, month_from, year_to, month_to);\n    var from_euro = euro_from_getter();\n    var to_euro = round(from_euro * inflation);\n    euro_result_setter(to_euro);\n    inflation_result_setter(round((inflation - 1) * 100));\n}\n","/**\n * Do an XHR via GET\n * @param {string} url url the request is sent to\n * @param {(err: (string | null), result?: string) => void} callback function called after request is done\n */\nexport function request(url, callback) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.onload = function () {\n        if (xhr.status === 200) {\n            callback(null, xhr.responseText);\n        }\n        else {\n            callback(\"Request failed.  Returned status of \" + xhr.status);\n        }\n    };\n    xhr.send();\n}\n","import { schilling_exchange_rate } from './constants';\nimport { euro_from_getter, euro_from_setter, schilling_from_getter, schilling_from_setter } from './html';\nimport { update_inflation } from './inflation';\n/**\n * event listener for euro change events\n * updates Schilling with conversion rate\n * @param {Event} e\n */\nexport function euro_past_listener(e) {\n    var euro = euro_from_getter();\n    schilling_from_setter(round(euro * schilling_exchange_rate));\n    update_inflation();\n}\n/**\n * event listener for Schilling change events\n * updates euro with conversion rate\n * @param {Event} e\n */\nexport function schilling_past_listener(e) {\n    var schilling = schilling_from_getter();\n    euro_from_setter(round(schilling / schilling_exchange_rate));\n    update_inflation();\n}\n/**\n * rounds to two decimal places\n * @param {number} input number to be rounded\n * @returns {number} rounded number\n */\nexport function round(input) {\n    return Math.round(input * 100) / 100;\n}\n","/**\n * euro/schilling conversion rate\n * @type {number}\n */\nexport var schilling_exchange_rate = 13.7603;\n","import { euro_past_listener, schilling_past_listener } from './conversion';\nimport { year_change_listener, month_change_listener } from './date';\n/**\n * Binds event listeners to html elements on page load\n */\nexport function addListeners() {\n    document.getElementById('euro_past').addEventListener('change', euro_past_listener);\n    document.getElementById('euro_past').addEventListener('keyup', euro_past_listener);\n    document.getElementById('schilling_past').addEventListener('change', schilling_past_listener);\n    document.getElementById('schilling_past').addEventListener('keyup', schilling_past_listener);\n    document.getElementById('year_from').addEventListener('change', year_change_listener);\n    document.getElementById('month_from').addEventListener('change', month_change_listener);\n    document.getElementById('year_to').addEventListener('change', year_change_listener);\n    document.getElementById('month_to').addEventListener('change', month_change_listener);\n}\n","import { addListeners } from \"./listeners\";\nimport { get_data } from './inflation';\nfunction main() {\n    addListeners();\n    get_data();\n}\nmain();\n"]}